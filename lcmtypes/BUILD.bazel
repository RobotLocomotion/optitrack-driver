# -*- python -*-
# This file contains rules for the Bazel build system; see https://bazel.build.

licenses(["notice"])

package(default_visibility = ["//visibility:public"])

load("//tools:lcm.bzl", "lcm_cc_library", "lcm_java_library", "lcm_py_library")

LCM_SRCS = [
    "optitrack_data_descriptions_t.lcm",
    "optitrack_frame_t.lcm",
    "optitrack_marker_set_description_t.lcm",
    "optitrack_marker_set_t.lcm",
    "optitrack_marker_t.lcm",
    "optitrack_rigid_body_t.lcm",
    "optitrack_rigid_body_description_t.lcm",
    "optitrack_rigid_body_marker_description_t.lcm",
    "optitrack_skeleton_description_t.lcm",
    "optitrack_skeleton_t.lcm",
]

# Also provide the srcs in a package-specific subdir.
[
    genrule(
        name = "_cp_" + x,
        srcs = [x],
        outs = ["optitrack/" + x],
        cmd = "cp $< $@",
        visibility = ["//visibility:private"],
    )
    for x in LCM_SRCS
]

filegroup(
    name = "lcm_srcs_with_subdir",
    srcs = [
        ":optitrack/" + x
        for x in LCM_SRCS
    ],
)

lcm_cc_library(
    name = "optitrack_lcmtypes",
    lcm_package = "optitrack",
    lcm_srcs = LCM_SRCS,
    linkstatic = 1,
)

filegroup(
    name = "cxx_srcs",
    srcs = [
        ":optitrack/" + x.replace(".lcm", ".hpp")
        for x in LCM_SRCS
    ],
)

lcm_py_library(
    name = "py_optitrack_lcmtypes",
    lcm_package = "optitrack",
    lcm_srcs = LCM_SRCS,
)

lcm_java_library(
    name = "lcmtypes_optitrack",
    lcm_package = "optitrack",
    lcm_srcs = LCM_SRCS,
)

filegroup(
    name = "java_srcs",
    srcs = [
        ":optitrack/" + x.replace(".lcm", ".java")
        for x in LCM_SRCS
    ],
)
